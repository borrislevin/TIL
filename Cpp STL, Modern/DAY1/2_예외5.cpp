#include <vector>
#include <iostream>
int main()
{
	std::vector<int> v = { 1,2,3,4,5 };

	// vector 의 요소 접근법. [] 연산자 또는 at() 멤버 함수 사용
	v[0] = 10;
	v.at(0) = 10; // 위와 동일한 코드

	// [] 연산자 : 잘못된 index 전달시 무조건 에러..(프로세스 종료)
	// at()함수  : ""                  예외 발생					=> 약간의 오버헤드 발생

	try
	{
		v[7] = 100;		// 예외 없이 잘못된 연산 수행..
//		v.at(7) = 100;
	}
	catch (std::out_of_range e) 
	{
		std::cout << "예외발생" << std::endl;
	}
	
	for (int i = 0; i < v.size(); i++)
	{
		// 다음중 좋은 코드는 ?
		v[i] = 0;		// 1. 좋은 코드.. i 는 절대 잘못되지 않는다.
//		v.at(i) = 0;	// 2
	}

	// 결론.. 
	// 1. C#, java 등의 다른 객체지향 언어는 "예외"를 상당히 많이 사용
	// 2. C++, "예외 사용시 약간의 오버헤드 발생"
	//   A. 심각한 오류가 아니면 "리턴값으로 전달"
	//   B. 심각한 오류의 경우는 예외 사용하는 경우가 많음..

	// 임베디드 회사 => 예외를 사용하지 않는 경우가 많음.
}