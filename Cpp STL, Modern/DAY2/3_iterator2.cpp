#include <iostream>
#include <list>   
#include <vector>

// 반복자 무효화 - 49 page 아래
int main()
{
	std::vector<int> v = { 1,2,3,4,5 };
	auto p = v.begin();

	std::cout << *p << std::endl;

	v.resize(10); // 이순간을 잘 생각해 봅시다.
				// 버퍼를 10개로 늘리기 위해서
				// 메모리 재할당을 하게 됩니다.
				// 기존에 꺼냈던 모든 반복자는
				// "무효화(invalidation) 됩니다."
				// 절대 사용하면 안됩니다

	std::cout << *p << std::endl; // runtime error
	//----------------------------------------
	// 질문!!
	std::list<int> s = { 1,2,3,4,5 };

	auto p2 = s.begin();

	s.resize(10); // 반복자가 무효화 될까요 ?
			      // 기존 노드는 지워지지 않고
				  // 뒤쪽에 노드를 추가하면 된다.
				  // 반복자 무효화 현상은 없다.
	*p2 = 10; // ??
	//------------------------------------------
	std::vector<int> v2 = { 1,2,3,4,5 };

	auto p3 = v2.begin();

	// 다음중 p3가 무효화 되는 코드를 모두 고르세요
	
	// 1. 끝 요소에 넣기
	v2[4] = 10; // v2의 크기 변화가 없다. - 무효화 안됨
	
	// 2. 끝에 요소를 추가
	v2.push_back(10); // v2의 크기가 변경 - 메모리 재할당 현상 발생.. 
					  // 반복자 무효화 현상 발생

	// 핵심 : 어떤 컨테이너의 어떤 함수가 반복자 무효화 현상이 있는가?
	//		 => 각 컨테이너의 "메모리 구조"를 완벽히 알아야 한다.

	// cppreference.com 에서 "Container Library" 를 다시 보세요





}





